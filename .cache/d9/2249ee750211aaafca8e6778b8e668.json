{"id":"ejercicios/prototype.html","dependencies":[{"name":"D:\\JFTO\\PERSONAL\\TUTORIALES\\Platzi\\Profesional_JS\\package.json","includedInParent":true,"mtime":1607623795704}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Prototype</title>\r\n</head>\r\n<body>\r\n    <a href=\"/ejercicios/\">Go back</a>\r\n    <p><em>Abre la consola</em></p>\r\n\r\n    <script>//Un objeto común y corriente\n// const ezio = {\n//     name: 'Ezio',\n// }\n// ezio.saludar = function () {\n//     console.log(`Hola soy ${this.name}`);\n// }\n// ezio.saludar();\n// const assassins = {\n//     name: 'Desmont',\n// }\n// assassins.saludar = function () {\n//     console.log(`Hola soy ${this.name}`);\n// }\n// assassins.saludar();\n//Seamos un poco mas eficientes\n// function Assassins (name){\n//     const assasin = {\n//         name: name\n//     }\n//     assasin.saludar = function(){\n//         console.log(`Hola soy ${this.name}`);\n//     }\n//     return assasin;\n// }\n// const desmont = Assassins(\"Desmont\");\n// desmont.saludar();\n// const ezio = Assassins(\"Ezio\");\n// ezio.saludar();\n//Aun podemos mejorar más y evitar tener que crear la misma funcion cada vez\n// const assassinsMethods = {\n//     saludar: function(){\n//         console.log(`Me llamo ${this.name}`);\n//     },\n// }\n// function Assassins (name){\n//     const assasin = {\n//         name: name\n//     }\n//     assasin.saludar = assassinsMethods.saludar;\n//     return assasin;\n// }\n// const desmont = Assassins(\"Desmont\");\n// desmont.saludar();\n// const ezio = Assassins(\"Ezio\");\n// ezio.saludar();\n//Object.create\n// const assassinsMethods = {\n//     saludar: function(){\n//         console.log(`Soy asesino ${this.name}`);\n//     },\n// }\n// function Assassins (name){\n//     const assassin = Object.create(assassinsMethods);\n//     assassin.name = name\n//     return assassin;\n// }\n// const desmont = Assassins(\"Desmont\");\n// desmont.saludar();\n// const ezio = Assassins(\"Ezio\");\n// ezio.saludar();\n//Los metodos dentro de nuestro objeto\n// const assassinsMethods = {\n//     saludar: function(){\n//         console.log(`Soy asesino ${this.name}`);\n//     },\n// }\n// function Assassins (name){\n//     const assassin = Object.create(Assassins.prototype);\n//     assassin.name = name\n//     return assassin;\n// }\n// Assassins.prototype.saludar = function(){\n//     console.log(`Soy asesino ${this.name}`);\n// }\n// const desmont = Assassins(\"Desmont\");\n// desmont.saludar();\n// const ezio = Assassins(\"Ezio\");\n// ezio.saludar();\n// new es un atajo (Azucar sintactica) para llevar Assassins.prototype al objeto\nfunction Assassins(name) {\n  // this = Object.create(Assassins.prototype);\n  this.name = name; // return this;\n}\n\nAssassins.prototype.saludar = function () {\n  console.log(`New  ${this.name}`);\n};\n\nconst desmont = new Assassins(\"Desmont\");\ndesmont.saludar();\nconst ezio = new Assassins(\"Ezio\");\nezio.saludar();</script>\r\n</body>\r\n</html>"},"sourceMaps":null,"error":null,"hash":"1b3a0a433be209500c1ec9913121d7d6","cacheData":{"env":{}}}